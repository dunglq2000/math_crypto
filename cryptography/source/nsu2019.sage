import gmpy2

n = 4076361302550483684524984004483156158356462640553515813866703718791672670905308860844304055285019651507728831663677166092475161554197561215372884449957084219778472139533451263689901852711025976018935658830540651908064758287421268759621419191593382767252094717222418132289251314647500491996323400002019
h = 7830799927833657758696152811024002692382891492752691194950119664549497756373569985393554661132717198368717093111812566649031173428184496335886470985446121512780351314542347866531365008870883047099654288891241821353207362290372720539680784860373583572653630883685906916701587362236649126895719656663293825501223970887996292526012494280624322547389357643046102816132642256417499027286468001256009599212578383223023458925765092934836426848117494065463529201859600747521892957258104033195441014023432365815292013921853276356749234592907492418315906619039651325142154451518308886658505820006667836934411881
m = n^2 + 8*2019

x = Integer(pow(3, 2019, m)).inverse_mod(m)
# y = Integer(pow(5, 2019, m)).inverse_mod(m)

v1 = [1, (pow(5, 2019, m) * x) % m]
v2 = [0, m]
V = matrix(ZZ, [v1, v2])
U = V.LLL()
a1, a2 = U[1]
t = (a1 * h * x) % m
for z in range(-10, 10):
    k = int(t) + z * m
    delta = k^2 - 4 * a1 * a2 * n^2
    if delta < 0: continue
    d, e = gmpy2.iroot(delta, 2)
    if e:
        p2 = (k + d) // (2 * a1)
        p, r = gmpy2.iroot(p2, 2)
        if r:
            assert n % p == 0
            q = n // p
            print("p =", p)
            print("q =", q)